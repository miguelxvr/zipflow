# Example SAM Template for AWS Lambda Deployment
# This is a reference implementation. Customize for your specific requirements.
# See infra/README.md for deployment instructions.

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  zipflow - Multi-provider streaming archiver (Example Template)

Globals:
  Function:
    Timeout: 900
    MemorySize: 2048
    Runtime: nodejs22.x
    Architectures:
      - x86_64
    Environment:
      Variables:
        NODE_ENV: production
        AWS_REGION: !Ref AWS::Region

Parameters:
  SourceUri:
    Type: String
    Description: Source URI (e.g., s3://bucket/path/)
    Default: s3://my-source-bucket/data/

  TargetUri:
    Type: String
    Description: Target URI (e.g., s3://bucket/path/archive.zip)
    Default: s3://my-target-bucket/archives/archive.zip

  SourceBucketName:
    Type: String
    Description: Source bucket name for IAM permissions
    Default: my-source-bucket

  TargetBucketName:
    Type: String
    Description: Target bucket name for IAM permissions
    Default: my-target-bucket

Resources:
  ZipflowFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: dist/handlers/lambda.handler
      Description: Archives S3 files into a compressed ZIP file using URI-based configuration
      Environment:
        Variables:
          SOURCE_URI: !Ref SourceUri
          TARGET_URI: !Ref TargetUri
          COMPRESSION_LEVEL: '9'
          UPLOAD_PART_SIZE: '5242880'
          UPLOAD_QUEUE_SIZE: '1'
          UPLOAD_TIMEOUT: '3600000'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucketName
        - S3CrudPolicy:
            BucketName: !Ref TargetBucketName
      Events:
        # API Gateway endpoint for manual invocation
        ArchiveApi:
          Type: Api
          Properties:
            Path: /archive
            Method: post
            RestApiId: !Ref S3CompressApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/handlers/lambda.ts
        External:
          - '@aws-sdk/*'

  S3CompressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Description: API for S3 Compress service
      Cors:
        AllowMethods: "'POST, OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  # S3 Event trigger (optional - uncomment to enable)
  # S3CompressTrigger:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref S3CompressFunction
  #     Action: lambda:InvokeFunction
  #     Principal: s3.amazonaws.com
  #     SourceArn: !Sub 'arn:aws:s3:::${SourceBucket}'

  # CloudWatch Log Group
  ZipflowFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ZipflowFunction}'
      RetentionInDays: 7

Outputs:
  ZipflowFunction:
    Description: zipflow Lambda Function ARN
    Value: !GetAtt ZipflowFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionArn'

  ZipflowFunctionIamRole:
    Description: IAM Role created for zipflow function
    Value: !GetAtt ZipflowFunctionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionRoleArn'

  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${S3CompressApi}.execute-api.${AWS::Region}.amazonaws.com/prod/archive'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  ApiId:
    Description: API Gateway ID
    Value: !Ref S3CompressApi
    Export:
      Name: !Sub '${AWS::StackName}-ApiId'

